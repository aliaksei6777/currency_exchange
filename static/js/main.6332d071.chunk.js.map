{"version":3,"sources":["redux/actions.ts","components/CurrencyExchange/CurrencyExchange.tsx","redux/selector.ts","containers/CurrencyExchangeContainer/CurrencyEContainer.tsx","App.tsx","reportWebVitals.ts","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfBYN","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","data-currency","onChange","className","map","currency","index","onClick","data-action","ChangeCurrencyFieldAC","type","CHANGE_CURRENCY_FIELD_TYPE","payload","ChangeActionAC","CHANGE_CHANGE_ACTION","selectCurrencies","state","currencies","selectCurrentCurrency","selectIsBuying","selectAmountOfBYN","selectAmountOfCurrency","CurrencyEContainer","dispatch","useDispatch","useSelector","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","СhangeCurrentCurrencyAC","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6332d071.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\r\n    CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\n\r\nexport type ChangeCurrencyFieldType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE;\r\n    payload: {\r\n        amountOfBYN: string;\r\n        amountOfCurrency: string\r\n    }\r\n};\r\n\r\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n        payload: {amountOfBYN, amountOfCurrency}\r\n    }\r\n};\r\n\r\nexport type ChangeAction = {\r\n    type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION;\r\n    payload: { isBuying: boolean }\r\n};\r\n\r\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n        payload: {isBuying}\r\n    }\r\n};\r\n\r\nexport type ChangeCurrentCurrencyType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY;\r\n    payload: { currentCurrency: string }\r\n};\r\n\r\nexport const СhangeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n        payload: {currentCurrency}\r\n    }\r\n};\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;","import React from 'react';\r\n\r\ntype CurrencyExchangePropsType = {\r\n    currenciesName: string[];\r\n    currentCurrency: string;\r\n    currencyRate: number;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\r\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nconst CurrencyExchange: React.FC<CurrencyExchangePropsType> = ({\r\n                                                                                  currenciesName,\r\n                                                                                  currentCurrency,\r\n                                                                                  currencyRate,\r\n                                                                                  isBuying,\r\n                                                                                  amountOfBYN,\r\n                                                                                  amountOfCurrency,\r\n                                                                                  changeCurrencyField,\r\n                                                                                  changeAction,\r\n                                                                                  changeCurrentCurrency,\r\n                                                                              }) => {\r\n    const viewCurrency = isBuying ? (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    ) : (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"currency\">\r\n            <h2>Currency exchange</h2>\r\n            <div className=\"currency-names\">\r\n                <p>Current currency:</p>\r\n                <ul>\r\n                    {currenciesName.map((currency: string, index: number) => {\r\n                        return (\r\n                            <li\r\n                                key={`${index}-${currency}`}\r\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\r\n                                onClick={changeCurrentCurrency}\r\n                                data-currency={currency}\r\n                            >\r\n                                {currency}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"currency-action\">\r\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\r\n          Buy\r\n        </span>\r\n                <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\r\n          Sell\r\n        </span>\r\n            </div>\r\n            <div className=\"fields\">\r\n                <p>Currency rate: {currencyRate}</p>\r\n                {viewCurrency}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","import { IGlobalState} from \"./state\";\n\ninterface IRootState extends IGlobalState{}\n\nexport const selectCurrencies = (state: IRootState) => state.currency.currencies;\nexport const selectCurrentCurrency = (state: IRootState) => state.currency.currentCurrency;\nexport const selectIsBuying = (state: IRootState) => state.currency.isBuying;\nexport const selectAmountOfBYN = (state: IRootState) => state.currency.amountOfBYN;\nexport const selectAmountOfCurrency = (state: IRootState) => state.currency.amountOfCurrency;\n","import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport { CurrencyType } from '../../redux/currencyReducer';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    СhangeCurrentCurrencyAC,\r\n    CurrencyReducersTypes\r\n} from '../../redux/actions';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    selectAmountOfBYN,\r\n    selectAmountOfCurrency,\r\n    selectCurrencies,\r\n    selectCurrentCurrency,\r\n    selectIsBuying\r\n} from \"../../redux/selector\";\r\n\r\nconst CurrencyEContainer: React.FC = () => {\r\n\r\n    const dispatch = useDispatch<Dispatch<CurrencyReducersTypes>>()\r\n    const currencies = useSelector(selectCurrencies)\r\n    const currentCurrency = useSelector(selectCurrentCurrency)\r\n    const isBuying = useSelector(selectIsBuying)\r\n    const amountOfBYN = useSelector(selectAmountOfBYN)\r\n    const amountOfCurrency = useSelector(selectAmountOfCurrency)\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false));\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        e.currentTarget.dataset.currency && dispatch(СhangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default CurrencyEContainer\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CurrencyEContainer from \"./containers/CurrencyExchangeContainer/CurrencyEContainer\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <CurrencyEContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ACTIONS_TYPE, CurrencyReducersTypes } from './actions';\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD',\r\n            buyRate: 2.62,\r\n            sellRate: 2.58,\r\n        },\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 3.1,\r\n            sellRate: 3.06,\r\n        },\r\n        {\r\n            currencyName: 'RUR',\r\n            buyRate: 0.0345,\r\n            sellRate: 0.0341,\r\n        },\r\n    ],\r\n    currentCurrency: 'USD',\r\n    isBuying: true,\r\n    amountOfBYN: '',\r\n    amountOfCurrency: '',\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                amountOfBYN: '',\r\n                amountOfCurrency: ''\r\n            }\r\n        // case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n        //     return {\r\n        //         ...state,\r\n        //         ...action.payload,\r\n        //         amountOfBYN: '',\r\n        //         amountOfCurrency: ''\r\n        //     }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { currencyReducer } from './currencyReducer';\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/state\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}